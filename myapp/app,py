from flask import Flask, render_template, request, jsonify
from markupsafe import Markup
from my_sf_dag.my_sf_dag import *

DOWNLOAD_DATA_FROM_SF=True
if DOWNLOAD_DATA_FROM_SF:
    df,tree=read_sf(fp='./static/data/')
else:
    df,tree=read_csv(fp='./static/data/')


def wrap_lines_in_span(s):
    lines = s.split('\n')
    wrapped_lines = [f'<span>{line}</span>' for line in lines]
    return '\n'.join(wrapped_lines)

    # returns string between sep characters
def clean_clicked_line(s,sep='*'):
    l=[]
    # for line in s 
    for line in s.split('\n'):
        if sep in line:
            l.append(line.split(sep)[1])
    return l



app = Flask(__name__)

@app.route('/')
def home():
    roots, desc = find_roots(tree)
    s = print_tree_from_root(roots[0], tree)
    s = wrap_lines_in_span(s)
    default_color = "#ff0000"  # Set your default color here
    
    return render_template('home.html', tree=Markup(s), color=default_color)
@app.route('/process_click', methods=['POST'])
def process_click():
    data = request.get_json()
    clicked_string = data['clicked_string']
    
    # Print the clicked string to the console
    print(clicked_string)
    clicked_node = clean_clicked_line(clicked_string)[0]
    clicked_parents = clean_clicked_line(print_tree_from_leaf(clicked_node, tree))
    clicked_descendants=clean_clicked_line(print_tree_from_root(clicked_node, tree))

    clicked_lineage=clicked_parents+clicked_descendants
    # process the clicked_string as needed
    return jsonify({'result': 'success', 'clicked_parents': clicked_parents
                    , 'clicked_descendants': clicked_descendants
                    ,'clicked_both':clicked_lineage
                    })


    


if __name__ == '__main__':
    app.run(debug=True)